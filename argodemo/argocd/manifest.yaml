---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: upgrade-sql-schema
  annotations:
    argocd.argoproj.io/hook: PreSync
spec:
  template:
    spec:
      containers:
        - name: upgrade-sql-schema
          image: alpine:latest
          command: ["sleep", "5"]
      restartPolicy: Never
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookapp-deployment
  labels:
    app: bookapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bookapp
  template:
    metadata:
      labels:
        app: bookapp
    spec:
      containers:
      - name: bookapp
        image: docker.io/probaln/bookapp:1.0.0
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: bookapp-service
  labels:
    app: bookapp
spec:
  type: LoadBalancer
  selector:
    app: bookapp
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
#apiVersion: apps/v1
#kind: ReplicaSet
#metadata:
#  name: backend
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      tier: backend
#  template:
#    metadata:
#      labels:
#        tier: backend
#    spec:
#      containers:
#        - name: main
#          image: nginx:latest
---
#apiVersion: v1
#kind: Service
#metadata:
#  name: backend
#spec:
#  selector:
#    tier: backend
#  ports:
#    - protocol: TCP
#      port: 8080
#      targetPort: 8080
---
apiVersion: batch/v1
kind: Job
metadata:
  name: maint-page-up
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      containers:
        - name: page-up
          image: alpine:latest
          command: ["sleep", "2"]
      restartPolicy: Never
  backoffLimit: 0
---
#apiVersion: apps/v1
#kind: ReplicaSet
#metadata:
#  name: frontend
#  annotations:
#    argocd.argoproj.io/sync-wave: "2"
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      tier: frontend
#  template:
#    metadata:
#      labels:
#        tier: frontend
#    spec:
#      containers:
#        - name: main
#          image: nginx:latest
---
#apiVersion: v1
#kind: Service
#metadata:
#  name: frontend
#  annotations:
#    argocd.argoproj.io/sync-wave: "2"
#spec:
#  selector:
#    tier: frontend
#  ports:
#    - protocol: TCP
#      port: 80
#      targetPort: 80
---
apiVersion: batch/v1
kind: Job
metadata:
  name: maint-page-down
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "3"
spec:
  template:
    spec:
      containers:
        - name: page-down
          image: alpine:latest
          command: ["sleep", "2"]
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: post-sync-job
  annotations:
    argocd.argoproj.io/hook: PostSync
#   argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-wave: "4"
spec:
  template:
    spec:
      containers:
        - name: post-sync
          image: alpine:latest
          command: ["sleep", "2"]
      restartPolicy: Never
  backoffLimit: 0
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hello-book-
  namespace: argo
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "5"
spec:
  entrypoint: test-book
  templates:
  - name: test-book
    container: 
      image: docker.io/probaln/test-bookapp:v3
      command: ["sh"]
      args: ["integ-test/test-initialization.sh","http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080"]
---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: fail-
  namespace: argo
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "6"
spec:
  entrypoint: test-fail-steps

  templates:
  - name: test-fail-steps
    # Instead of just running a container, this template runs a seq of containers
    steps:
    - - name: Initialization
        template: test-book
        arguments:
          parameters:
          - name:  test_script_name
            value: integ-test/test-initialization.sh 
          - name: cluster_url
            value: http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080
    - - name: AddABook
        template: test-book
        arguments:
          parameters:
          - name:  test_script_name
            value: integ-test/test-add.sh 
          - name: cluster_url
            value: http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080
    - - name: AlwaysFailStep
        template: test-book
        arguments:
          parameters:
          - name:  test_script_name
            value: integ-test/test-update.sh 
          - name: cluster_url
            value: http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080
    - - name: UpdateBook
        template: test-book
        arguments:
          parameters:
          - name:  test_script_name
            value: integ-test/test-patch.sh 
          - name: cluster_url
            value: http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080
    - - name: DeleteABook
        template: test-book
        arguments:
          parameters:
          - name:  test_script_name
            value: integ-test/test-delete.sh 
          - name: cluster_url
            value: http://a02a0afac49b5423184b755c9ae88e4d-801578416.us-east-2.elb.amazonaws.com:8080

  - name: test-book
    inputs:
      parameters:
      - name: test_script_name
      - name: cluster_url
    container: 
      image: docker.io/probaln/test-bookapp:v3
      command: ["sh"]
      args: ["{{inputs.parameters.test_script_name}}", "{{inputs.parameters.cluster_url}}"]

